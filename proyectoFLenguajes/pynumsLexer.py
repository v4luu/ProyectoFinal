# Generated from pynums.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,324,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        3,22,179,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,195,8,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,204,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
        1,37,1,37,1,37,5,37,283,8,37,10,37,12,37,286,9,37,1,37,1,37,1,38,
        4,38,291,8,38,11,38,12,38,292,1,39,4,39,296,8,39,11,39,12,39,297,
        1,40,4,40,301,8,40,11,40,12,40,302,1,40,1,40,4,40,307,8,40,11,40,
        12,40,308,3,40,311,8,40,1,41,3,41,314,8,41,1,41,1,41,1,42,4,42,319,
        8,42,11,42,12,42,320,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,1,0,5,2,0,60,60,62,62,3,0,10,10,13,13,34,34,2,
        0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,338,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,1,87,1,0,0,0,3,89,1,0,0,0,5,98,1,0,0,0,7,100,1,0,0,
        0,9,109,1,0,0,0,11,111,1,0,0,0,13,113,1,0,0,0,15,115,1,0,0,0,17,
        125,1,0,0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,134,1,0,0,0,25,143,
        1,0,0,0,27,146,1,0,0,0,29,153,1,0,0,0,31,155,1,0,0,0,33,157,1,0,
        0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,163,1,0,0,0,41,165,1,0,0,0,
        43,167,1,0,0,0,45,178,1,0,0,0,47,180,1,0,0,0,49,194,1,0,0,0,51,203,
        1,0,0,0,53,205,1,0,0,0,55,209,1,0,0,0,57,216,1,0,0,0,59,219,1,0,
        0,0,61,224,1,0,0,0,63,229,1,0,0,0,65,233,1,0,0,0,67,239,1,0,0,0,
        69,245,1,0,0,0,71,255,1,0,0,0,73,266,1,0,0,0,75,278,1,0,0,0,77,290,
        1,0,0,0,79,295,1,0,0,0,81,300,1,0,0,0,83,313,1,0,0,0,85,318,1,0,
        0,0,87,88,5,61,0,0,88,2,1,0,0,0,89,90,5,46,0,0,90,91,5,97,0,0,91,
        92,5,112,0,0,92,93,5,112,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,
        96,5,100,0,0,96,97,5,40,0,0,97,4,1,0,0,0,98,99,5,41,0,0,99,6,1,0,
        0,0,100,101,5,46,0,0,101,102,5,114,0,0,102,103,5,101,0,0,103,104,
        5,109,0,0,104,105,5,111,0,0,105,106,5,118,0,0,106,107,5,101,0,0,
        107,108,5,40,0,0,108,8,1,0,0,0,109,110,5,58,0,0,110,10,1,0,0,0,111,
        112,5,123,0,0,112,12,1,0,0,0,113,114,5,125,0,0,114,14,1,0,0,0,115,
        116,5,119,0,0,116,117,5,114,0,0,117,118,5,105,0,0,118,119,5,116,
        0,0,119,120,5,101,0,0,120,121,5,95,0,0,121,122,5,99,0,0,122,123,
        5,115,0,0,123,124,5,118,0,0,124,16,1,0,0,0,125,126,5,40,0,0,126,
        18,1,0,0,0,127,128,5,44,0,0,128,20,1,0,0,0,129,130,5,103,0,0,130,
        131,5,114,0,0,131,132,5,97,0,0,132,133,5,102,0,0,133,22,1,0,0,0,
        134,135,5,114,0,0,135,136,5,101,0,0,136,137,5,97,0,0,137,138,5,100,
        0,0,138,139,5,95,0,0,139,140,5,99,0,0,140,141,5,115,0,0,141,142,
        5,118,0,0,142,24,1,0,0,0,143,144,5,46,0,0,144,145,5,46,0,0,145,26,
        1,0,0,0,146,147,5,46,0,0,147,148,5,115,0,0,148,149,5,112,0,0,149,
        150,5,108,0,0,150,151,5,105,0,0,151,152,5,116,0,0,152,28,1,0,0,0,
        153,154,5,91,0,0,154,30,1,0,0,0,155,156,5,93,0,0,156,32,1,0,0,0,
        157,158,5,42,0,0,158,34,1,0,0,0,159,160,5,47,0,0,160,36,1,0,0,0,
        161,162,5,37,0,0,162,38,1,0,0,0,163,164,5,43,0,0,164,40,1,0,0,0,
        165,166,5,45,0,0,166,42,1,0,0,0,167,168,5,94,0,0,168,44,1,0,0,0,
        169,170,5,70,0,0,170,171,5,97,0,0,171,172,5,108,0,0,172,173,5,115,
        0,0,173,179,5,101,0,0,174,175,5,84,0,0,175,176,5,114,0,0,176,177,
        5,117,0,0,177,179,5,101,0,0,178,169,1,0,0,0,178,174,1,0,0,0,179,
        46,1,0,0,0,180,181,5,115,0,0,181,182,5,113,0,0,182,183,5,114,0,0,
        183,184,5,116,0,0,184,48,1,0,0,0,185,186,5,115,0,0,186,187,5,105,
        0,0,187,195,5,110,0,0,188,189,5,99,0,0,189,190,5,111,0,0,190,195,
        5,115,0,0,191,192,5,116,0,0,192,193,5,97,0,0,193,195,5,110,0,0,194,
        185,1,0,0,0,194,188,1,0,0,0,194,191,1,0,0,0,195,50,1,0,0,0,196,204,
        7,0,0,0,197,198,5,61,0,0,198,204,5,61,0,0,199,200,5,60,0,0,200,204,
        5,61,0,0,201,202,5,62,0,0,202,204,5,61,0,0,203,196,1,0,0,0,203,197,
        1,0,0,0,203,199,1,0,0,0,203,201,1,0,0,0,204,52,1,0,0,0,205,206,5,
        100,0,0,206,207,5,101,0,0,207,208,5,102,0,0,208,54,1,0,0,0,209,210,
        5,114,0,0,210,211,5,101,0,0,211,212,5,116,0,0,212,213,5,117,0,0,
        213,214,5,114,0,0,214,215,5,110,0,0,215,56,1,0,0,0,216,217,5,105,
        0,0,217,218,5,102,0,0,218,58,1,0,0,0,219,220,5,101,0,0,220,221,5,
        108,0,0,221,222,5,105,0,0,222,223,5,102,0,0,223,60,1,0,0,0,224,225,
        5,101,0,0,225,226,5,108,0,0,226,227,5,115,0,0,227,228,5,101,0,0,
        228,62,1,0,0,0,229,230,5,102,0,0,230,231,5,111,0,0,231,232,5,114,
        0,0,232,64,1,0,0,0,233,234,5,119,0,0,234,235,5,104,0,0,235,236,5,
        105,0,0,236,237,5,108,0,0,237,238,5,101,0,0,238,66,1,0,0,0,239,240,
        5,112,0,0,240,241,5,114,0,0,241,242,5,105,0,0,242,243,5,110,0,0,
        243,244,5,116,0,0,244,68,1,0,0,0,245,246,5,114,0,0,246,247,5,101,
        0,0,247,248,5,97,0,0,248,249,5,100,0,0,249,250,5,95,0,0,250,251,
        5,102,0,0,251,252,5,105,0,0,252,253,5,108,0,0,253,254,5,101,0,0,
        254,70,1,0,0,0,255,256,5,119,0,0,256,257,5,114,0,0,257,258,5,105,
        0,0,258,259,5,116,0,0,259,260,5,101,0,0,260,261,5,95,0,0,261,262,
        5,102,0,0,262,263,5,105,0,0,263,264,5,108,0,0,264,265,5,101,0,0,
        265,72,1,0,0,0,266,267,5,97,0,0,267,268,5,112,0,0,268,269,5,112,
        0,0,269,270,5,101,0,0,270,271,5,110,0,0,271,272,5,100,0,0,272,273,
        5,95,0,0,273,274,5,102,0,0,274,275,5,105,0,0,275,276,5,108,0,0,276,
        277,5,101,0,0,277,74,1,0,0,0,278,284,5,34,0,0,279,283,8,1,0,0,280,
        281,5,34,0,0,281,283,5,34,0,0,282,279,1,0,0,0,282,280,1,0,0,0,283,
        286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,
        284,1,0,0,0,287,288,5,34,0,0,288,76,1,0,0,0,289,291,7,2,0,0,290,
        289,1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,
        78,1,0,0,0,294,296,7,3,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,
        1,0,0,0,297,298,1,0,0,0,298,80,1,0,0,0,299,301,7,3,0,0,300,299,1,
        0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,310,1,
        0,0,0,304,306,5,46,0,0,305,307,7,3,0,0,306,305,1,0,0,0,307,308,1,
        0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,304,1,
        0,0,0,310,311,1,0,0,0,311,82,1,0,0,0,312,314,5,13,0,0,313,312,1,
        0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,5,10,0,0,316,84,1,
        0,0,0,317,319,7,4,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,
        0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,6,42,0,0,323,86,1,
        0,0,0,13,0,178,194,203,282,284,292,297,302,308,310,313,320,1,6,0,
        0
    ]

class pynumsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    MUL = 17
    DIV = 18
    MOD = 19
    ADD = 20
    SUB = 21
    POW = 22
    BOOL = 23
    SQRT = 24
    TRIG = 25
    COMP = 26
    DEF = 27
    RETURN = 28
    IF = 29
    ELIF = 30
    ELSE = 31
    FOR = 32
    WHILE = 33
    PRINT = 34
    FILE_READ = 35
    FILE_WRITE = 36
    FILE_APPEND = 37
    STR = 38
    ID = 39
    INT = 40
    FLOAT = 41
    NEWLINE = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'.append('", "')'", "'.remove('", "':'", "'{'", "'}'", 
            "'write_csv'", "'('", "','", "'graf'", "'read_csv'", "'..'", 
            "'.split'", "'['", "']'", "'*'", "'/'", "'%'", "'+'", "'-'", 
            "'^'", "'sqrt'", "'def'", "'return'", "'if'", "'elif'", "'else'", 
            "'for'", "'while'", "'print'", "'read_file'", "'write_file'", 
            "'append_file'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "MOD", "ADD", "SUB", "POW", "BOOL", "SQRT", "TRIG", 
            "COMP", "DEF", "RETURN", "IF", "ELIF", "ELSE", "FOR", "WHILE", 
            "PRINT", "FILE_READ", "FILE_WRITE", "FILE_APPEND", "STR", "ID", 
            "INT", "FLOAT", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "MUL", "DIV", "MOD", "ADD", "SUB", "POW", 
                  "BOOL", "SQRT", "TRIG", "COMP", "DEF", "RETURN", "IF", 
                  "ELIF", "ELSE", "FOR", "WHILE", "PRINT", "FILE_READ", 
                  "FILE_WRITE", "FILE_APPEND", "STR", "ID", "INT", "FLOAT", 
                  "NEWLINE", "WS" ]

    grammarFileName = "pynums.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


